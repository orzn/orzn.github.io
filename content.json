{"meta":{"title":"orzn","subtitle":"兴趣使然","description":"望你走出半生，归来仍是少年","author":"John Doe","url":"http://orzn.github.com"},"pages":[],"posts":[{"title":"Java ConcurrentModificationException","slug":"java","date":"2017-05-18T14:26:32.003Z","updated":"2017-05-18T16:31:33.599Z","comments":true,"path":"2017/05/18/java/","link":"","permalink":"http://orzn.github.com/2017/05/18/java/","excerpt":"","text":"1. 出现原因 具体源码就不剖析了，直接说结果。原因是调用list.remove()方法导致modCount和expectedModCount的值不一致。注意，像使用for-each进行迭代实际上也会出现这种问题。所以，在迭代的过程中就不要使用list.remove()方法。 2. 单线程环境下的解决办法 既然知道原因了，那么如何解决呢？ 其实很简单，细心的朋友可能发现在Itr类中也给出了一个remove()方法： 123456789101112131415public void remove() &#123; if (lastRet == -1) throw new IllegalStateException(); checkForComodification(); try &#123; AbstractList.this.remove(lastRet); if (lastRet &lt; cursor) cursor--; lastRet = -1; expectedModCount = modCount; &#125; catch (IndexOutOfBoundsException e) &#123; throw new ConcurrentModificationException(); &#125;&#125; 在这个方法中，删除元素实际上调用的就是list.remove()方法，但是它多了一个操作： 1expectedModCount = modCount; 因此，在迭代器中如果要删除元素的话，需要调用Itr类的remove方法。 将上述代码改为下面这样就不会报错了： 123456789101112public class Test &#123; public static void main(String[] args) &#123; ArrayList&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;(); list.add(2); Iterator&lt;Integer&gt; iterator = list.iterator(); while(iterator.hasNext())&#123; Integer integer = iterator.next(); if(integer==2) iterator.remove(); //注意这个地方 &#125; &#125;&#125; 3. 多线程环境下的解决办法 一般有2种解决办法： 1. 在使用iterator迭代的时候使用synchronized或者Lock进行同步； 2. 使用并发容器CopyOnWriteArrayList代替ArrayList和Vector。","categories":[],"tags":[{"name":"java","slug":"java","permalink":"http://orzn.github.com/tags/java/"}]},{"title":"markov","slug":"markov","date":"2017-05-17T15:39:27.000Z","updated":"2017-05-19T15:23:05.762Z","comments":true,"path":"2017/05/17/markov/","link":"","permalink":"http://orzn.github.com/2017/05/17/markov/","excerpt":"","text":"马尔科夫也是一个经常遇到的名词了，马尔科夫过程，马尔科夫随机场等等，了解过，但一知半解，仍不是很理解，趁着学习图像处理这门课，把这些相关的东西也好好学学，整理整理。 马尔可夫链，因安德烈·马尔可夫（A.A.Markov，1856－1922）得名，是指数学中具有马尔可夫性质的离散事件随机过程。该过程中，在给定当前知识或信息的情况下，过去（即当前以前的历史状态）对于预测将来（即当前以后的未来状态）是无关的。随机漫步就是马尔可夫链的例子。其满足下面这个式子： 而马尔科夫过程呢，实际和马尔科夫链是一回事，只不过马尔科夫链是一个离散事件。 要说马尔科夫随机场，还需要先明确随机场的概念。随机场包含两个要素：位置（site），相空间（phase space）。当给每一个位置中按照某种分布随机赋予相空间的一个值之后，其全体就叫做随机场。我们不妨拿种地来打个比方。“位置”好比是一亩亩农田；“相空间”好比是种的各种庄稼。我们可以给不同的地种上不同的庄稼，这就好比给随机场的每个“位置”，赋予相空间里不同的值。所以，俗气点说，随机场就是在哪块地里种什么庄稼的事情。那么什么是马尔可夫随机场呢？还是拿种地打比方，如果任何一块地里种的庄稼的种类仅仅与它邻近的地里种的庄稼的种类有关，与其它地方的庄稼的种类无关，那么这些地里种的庄稼的集合，就是一个马尔可夫随机场。 要严格定义马尔科夫随机场，还需要引入邻域系统的的概念。 其实看了这幅图之后，不用细讲，也会大概明白邻域系统是个什么东西。在具体应用中，选取以x为中心，多大范围内的点为x的相邻像素点，不是固定不变的。X周围紫色的一圈称为4邻域系统，周围的所有8个点称为8邻域系统。令F={F1,…..,Fm}是一组定义在集合S上的随机变量，假如邻域系统中，对于任一点X，其取值只与邻域有关，那么我们就可以称F是一个马尔科夫随机场。 用马尔科夫随机场模型来解决实际问题时，如图像切割时，往往会用到马尔科夫随机场。","categories":[],"tags":[{"name":"图像处理","slug":"图像处理","permalink":"http://orzn.github.com/tags/图像处理/"}]},{"title":"markdown","slug":"markdown","date":"2017-05-09T05:09:16.000Z","updated":"2017-05-09T05:36:23.881Z","comments":true,"path":"2017/05/09/markdown/","link":"","permalink":"http://orzn.github.com/2017/05/09/markdown/","excerpt":"","text":"Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。当然，我使用这个主要是因为github的锅。别的不多说了，这里简单介绍一些Markdown的基本语法： 1. 标题 对于标题，有两种写法：Setext和atx形式。Setext形式是利用底线的形式，利用=（最高阶标题）和-（第二节标题）；Atx形式是在行首插入1到6个#，对应标题1到6阶。 Setext形式：A First Level Header =（几个等于号都行） A Second Level Header - A First Level Header=A Second Level Header- 经测试，好像Setex并不靠谱。。。 Atx形式：#A First Level Header ##A Second Level Header A First Level HeaderA Second Level Header2. 段落 想要分段需要在两个段落中间加入一个以上的空行。或者可以在上一个段末加上两个空格。不过，效果不同。 This is a paragraph. This is the second paragraph This is a paragraph. This is the second paragraph This is a paragraph.(space)(space) This is the second paragraph This is a paragraph.This is the second paragraph 3. 粗斜体 粗体，斜体也经常会用到。斜体就是文本两端加上＊或者＿，而粗体是在两边各加两个，粗斜体是加三个。 *斜体文本* _斜体文本_ 斜体文本 斜体文本 **粗体文本** __粗体文本__ 粗体文本 粗体文本 ***粗斜体文本*** ___粗斜体文本___ 粗斜体文本 粗斜体文本 4. 列表无序列表以下三种写法都行： - 列表文本前使用 [减号+空格] + 列表文本前使用 [加号+空格] * 列表文本前使用 [星号+空格] 列表文本前使用 [减号+空格] 列表文本前使用 [加号+空格] 列表文本前使用 [星号+空格] 有序列表注意： 数字后面有个点. 1. 列表前使用 [数字+空格] 2. 我们会自动帮你添加数字 7. 不用担心数字不对，显示的时候我们会自动把这行的 7 纠正为 3 列表前使用 [数字+空格] 我们会自动帮你添加数字 不用担心数字不对，显示的时候我们会自动把这行的 7 纠正为 3 除了普通的列表以外，我们也许还会用到列表的嵌套，这时候，只需要在前面加上四个空格。 5. 链接常用的链接方法：文字链接 [this is my hourse](http://www.orzn.ml) 网址链接 &lt;http://www.orzn.ml&gt; 文字链接 this is my hourse 网址链接 http://www.orzn.ml 高级链接方法：这个链接用 1 作为网址变量 [Google][1].这个链接用 yahoo 作为网址变量 [Yahoo!][yahoo]. 然后在文档的结尾为变量赋值（网址） [1]: http://www.google.com/ [yahoo]: http://www.yahoo.com/ 这个链接用 1 作为网址变量 Google.这个链接用 yahoo 作为网址变量 Yahoo!.然后在文档的结尾为变量赋值（网址） 以上两种写法显示效果是一样的，第二种方法在文档的结尾所写的网址，也不会显示。 6. 图片 跟链接的方法区别在于前面加了个感叹号 !，这样是不是觉得好记多了呢？也可以使用 HTML 的图片语法来自定义图片的宽高大小: &lt;img src=&quot;http://ww4.sinaimg.cn/mw690/7b405dbbgw1e9ko16tk6dj20pc0fuwhw.jpg&quot; width=&quot;400&quot; height=&quot;100&quot;&gt; 7. 代码 想要在文中高亮语句中的某个函数名或关键字，可以使用 `function_name()` 实现function_name()。如果是代码段，可以用12345```javascript$(document).ready(function () &#123; alert(&apos;hello world&apos;);&#125;); 123$(document).ready(function () &#123; alert('hello world');&#125;); PS: 如果你的描述中需要用到 markdown 的符号，比如 # * 等，但又不想它被转义，这时候可以在这些符号前加反斜杠，如 \\ \\# \\* 进行避免。 目前只支持部分段内 HTML 元素效果，包括&lt;kdb&gt; &lt;b&gt; &lt;i&gt; &lt;em&gt; &lt;sup&gt; &lt;sub&gt; &lt;br&gt;当然，前面提到的img也是。 markdown里面段落前是不能空两格的，我们可以将输入法调成全角，然后在段首敲两个空格键就可以了。","categories":[],"tags":[{"name":"markdown","slug":"markdown","permalink":"http://orzn.github.com/tags/markdown/"}]},{"title":"Hello World","slug":"hello-world","date":"2017-05-07T16:50:17.733Z","updated":"2017-05-08T04:48:35.899Z","comments":true,"path":"2017/05/08/hello-world/","link":"","permalink":"http://orzn.github.com/2017/05/08/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}